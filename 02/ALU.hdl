// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a= x, b= false, sel=zx , out=Xor0 ); // if zx==0 then Xor0=x otherwise Xor0=0
    Not16(in= Xor0, out=notXor0 ); // negated x
    Mux16(a=Xor0 , b=notXor0 , sel=nx , out=Xor0orNeg ); //if nx==0 then Xor0orNeg=Xor0 otehrwise=negx

    Mux16(a=y, b= false, sel=zy , out=Yor0 ); // if zy==0 then Yor0=x otherwise Yor0=0
    Not16(in= Yor0, out=notYor0 ); // negated y
    Mux16(a=Yor0 , b=notYor0 , sel=ny , out=Yor0orNeg );

    And16(a=Xor0orNeg , b=Yor0orNeg , out=andXY );
    Add16(a = Xor0orNeg, b = Yor0orNeg, out = addXY);
    Mux16(a=andXY , b=addXY , sel=f , out= AluRes);
    Not16(in=AluRes , out=notAluRes );
    Mux16(a=AluRes , b=notAluRes , sel=no , out[0..7]=outLSB, out[8..14]=outAlmostMSB, out[15]=outMSB ); // break apart for flags
    Mux(a=outMSB , b=false , sel=false , out=ng );     // MSB = 1 <=> out < 0
    Mux16(a[0..7]=outLSB, a[8..14]=outAlmostMSB, a[15]=outMSB , b=false , sel=false , out=out );
    Or8Way(in=outLSB , out=notzr1 );
    Or8Way(in[0..6]=outAlmostMSB, in[7]=outMSB, out=notzr2 );
    Or(a=notzr1 , b=notzr2 , out=notzr );
    Not(in=notzr , out=zr );
}