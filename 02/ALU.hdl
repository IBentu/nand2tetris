// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a= x, b= false, sel=zx , out=Xor0 ); // if zx==0 then Xor0=x otherwise Xor0=0
    Not16(in= Xor0, out=notXor0 ); // negated x
    Mux16(a=Xor0 , b=notXor0 , sel=nx , out=Xor0orNeg ); //if nx==0 then Xor0orNeg=Xor0 otehrwise=negx

    Mux16(a=y, b= false, sel=zy , out=Yor0 ); // if zy==0 then Yor0=x otherwise Yor0=0
    Not16(in= Yor0, out=notYor0 ); // negated y
    Mux16(a=Yor0 , b=notYor0 , sel=ny , out=Yor0orNeg );

    And16(a=Xor0orNeg , b=Yor0orNeg , out=andXY );
    Add16(a = Xor0orNeg, b = Yor0orNeg, out = addXY);
    Mux16(a=andXY , b=addXY , sel=f , out= AluRes);
    Not16(in=AluRes , out=notAluRes );
    Mux16(a=AluRes , b=notAluRes , sel=no , out[0..7]=outLSB, out[8..14]=outAlmostMSB, out[15]=outMSB ); // break apart for flags
    Mux(a=outMSB , b=false , sel=false , out=ng );     // MSB = 1 <=> out < 0
    Mux16(a[0..7]=outLSB, a[8..14]=outAlmostMSB, a[15]=outMSB , b=false , sel=false , out=out );
    Or8Way(in=outLSB , out=notzr1 );
    Or8Way(in[0..6]=outAlmostMSB, in[7]=outMSB, out=notzr2 );
    Or(a=notzr1 , b=notzr2 , out=notzr );
    Not(in=notzr , out=zr );


}