// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        static Array twoToThe; // stores the value of 2^i in the i-th index of the array

        /** Initializes the library. */
        function void init() {
            var int i, b;
            let twoToThe = Array.new(16);
            let i = 0;
            let b = 1;
            while (i < 16) {
                let twoToThe[i] = b;
                let b = b + b;
                let i = i+1;
            }
            return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0) {
                return -x;
            }
            return x;
        }

        /** returns the i-th bit of x */ 
        function boolean bit(int x, int i) {
            return ~((x & twoToThe[i]) = 0); // (x and 2^i) = 0 only if the i-th bit in x is 0
        }


        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            var int sum, shiftedX, i;
            if ((x = 0) | (y = 0)) {
                return 0;
            }
            let shiftedX = x;
            let sum = 0;
            let i = 0;
            while (i < 16) { // only need to shift MSB times
                if (Math.bit(y, i)) {
                    let sum = sum + shiftedX;
                }
                let shiftedX = shiftedX + shiftedX;
                let i = i+1;
            }
            return sum;
        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            var boolean neg_x, neg_y;
            var int abs_div;
            if (y = 0) {
                do Sys.error(3) // division by 0 error
            }
            if (x = 0) {
                return 0;
            }
            if (x > 0) {
                let neg_x = false;
            } else {
                let neg_x = true;
            }
            if (y > 0) {
                let neg_y = false;
            } else {
                let neg_y = true;
            }
            let abs_div = Math.divide_abs(Math.abs(x), Math.abs(y));
            if (neg_x & neg_y) {
                return abs_div;
            } else {
                if (neg_x | neg_y) {
                    return -abs_div;
                }
            }
            return abs_div;
        }

        // this functino asssumes x>0, y>0
        function int divide_abs(int x, int y) {
            // TODO: FIX, doesn't pass test
            var int q;
            if ((y > x) | (y < 0)) { // the second condition is for overflow
                return 0;
            }
            let q = Math.divide(x, y+y); 
            // q = x/2y = { x/2y     , x even
            //            { (x-1)/2y , x odd
            // -> 2*q*y = { x        , x even
            //            { x-1      , x odd
            // -> x-2*q*y = x%2
            if (Math.bit(x, 0) < y) {  
                return q+q;
            }
            return q+q+1;
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            var int y, i, tmp;
            if (x < 0) { 
                do Sys.error(4); // sqrt of negetive number error;
            }
            if (x = 0) {
                return 0;
            }
            let y = 0;
            let i = 7; // = 16/2 - 1
            while (i > -1) { 
                let tmp = y+twoToThe[i];
                if ((tmp*tmp < x+1) & ~(tmp = 0)) {
                    let y = tmp;
                }
                let i = i-1;
            }
            return y;
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if (a > b) {
                return a;
            } else {
                return b;
            }
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (a > b) {
                return b;
            } else {
                return a;
            }
        }
}
