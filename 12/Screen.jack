// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
        static Array screen;
        static Array twoToThe;
        static boolean color;

        /** Initializes the Screen. */
        function void init() {
            var int i, b;
            let screen = 16384; // base location of screen memory
            do Screen.clearScreen();
            do Screen.setColor(true);
            let twoToThe = Array.new(16);
            let i = 0;
            let b = 1;
            while (i < 16) {
                let twoToThe[i] = b;
                let b = b+b;
                let i = i+1;
            }
            return;
        }

        /** Erases the entire screen. */
        function void clearScreen() {
            var int i;
            let i = 0;
            while (i < 8192) {
                let screen[i] = 0;
                let i = i+1;
            }
            return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
            let color = b;
            return;
        }

        /** returns true if x or y is out of bounds */
        function boolean outOfBounds(int x, int y) {
            return ((x < 0) | (x > 511) | (y < 0) | (y > 255)); // the screen is 512x256 px
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            var int xmod16, address;
            if (Screen.outOfBounds(x, y)) {
                do Sys.error(7); // illegal pizel coords
            }
            let xmod16 = (x & 15);
            let address = (^(^(^(^(^y))))) + (#(#(#(#x)))); // since 16 and 32 are powers of 2 we can use shifts for the division and multiplication
            if (color) {
                let screen[address] = (screen[address] | twoToThe[xmod16]); // or with 0001000...0 guarantees the required bit is on  
            } else {
                let screen[address] = (screen[address] & (~(twoToThe[xmod16])));// and with 1111011...1 guarantees the required bit is off
            }
            return;
        }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            var int tmp;
            if (Screen.outOfBounds(x1, y1) | Screen.outOfBounds(x2, y2)) {
                do Sys.error(8); // illegal line coords
            }
            if ((x1 = x2) & (y1 = y2)) {
                do Screen.drawPixel(x1, y1);
                return;
            }
            if (x1 > x2) { // x1 will always be the left point
                let tmp = x1;
                let x1 = x2;
                let x2 = tmp;
                let tmp = y1;
                let y1 = y2;
                let y2 = tmp;
            }
            if (~((y1 = y2) | (x1 = x2))) { // x1 != x2 and y1 != y2
                do Screen.drawDiagonal(x1, y1, x2, y2);
            } else {
                if (x1 = x2) {
                    if (y1 > y2) {
                        let tmp = y1;
                        let y1 = y2;
                        let y2 = tmp;
                    }
                    do Screen.drawVertical(x1, y1, y2);
                } else { // y1 = y2
                    do Screen.drawHorizontal(x1, x2, y1);
                }
            }
            return;
        }

        /** this assumes x1 < x2 */ 
        function void drawDiagonal(int x1, int y1, int x2, int y2) {
            var int dx, dy, a, b, diff, b_inc; 
            let a = 0;
            let b = 0;
            let diff = 0;
            let dx = x2 - x1;
            let dy = y2 - y1;
            if (dy > 0) {
                let b_inc = 1;   // northeast direction (/) => southeast on screen (\)
            } else {
                let b_inc = -1;  // southeast direction (\) => northeast on screen (/)
            }
            while (~(a > dx) & (((b_inc = 1) & ~(b > dy)) | ((b_inc = -1) & ~(b < dy)))) { // a <= dx and abs(b) <= abs(dy)
                do Screen.drawPixel(x1+a, y1+b);
                if (diff < 0) { // b/a > dy/dx -> diff = a*dy-b*dx < 0
                    let a = a+1;
                    let diff = diff + Math.abs(dy);
                } else {
                    let b = b+b_inc;
                    let diff = diff-dx;
                }
            }
            return;
        }

        /** this assumes y1 < y2 */
        function void drawVertical(int x, int y1, int y2) {
            while (~(y1 > y2)) {
                do Screen.drawPixel(x, y1);
                let y1 = y1+1;
            }
            return;
        }

        /** this assumes x1 < x2 */ 
        function void drawHorizontal(int x1, int x2, int y) {
            var int x1mod16, x2mod16, row, start, end;
                                
            let x1mod16 = x1 & 15;
            let x2mod16 = x2 & 15;
            let row = (^(^(^(^(^y)))));
            let start = row + (#(#(#(#x1))));
            let end = row + (#(#(#(#x2)))) + (x2mod16=0);
            if (start = end) {
                do Screen.drawAddressSection(x1, x2, y);
            } else {
                if (~(x1mod16 = 0)) {
                    // draw start of line
                    do Screen.drawAddressSection(x1, x1-x1mod16+16, y); // middle of the address (=x1) to the end
                    let start = start+1;
                }
                if (~(x2mod16 = 0)) {
                    // draw end of line
                    do Screen.drawAddressSection(x2-x2mod16, x2, y); // start of the address to the middle of the address (=x2)
                    let end = end-1;
                }
                while( ~(start > end) ) {     
                    // draw middle of line
                    let screen[start] = color;
                    let start = start+1;
                }
            }
            return;
        }

        /** draws from x1 to x2, assumes both ints are in the same address word and x1 <= x2*/
        function void drawAddressSection(int x1, int x2, int y) {
            while(~(x1 > x2)) {
                do Screen.drawPixel(x1, y);
                let x1 = x1+1;
            }
            return;
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {
            var int b, dy;
            if ((Screen.outOfBounds(x1, y1) | Screen.outOfBounds(x2, y2)) | ((x1 > x2) | (y1 > y2))) {
                do Sys.error(9); // illegal rect coords
            }
            let b = 0;
            let dy = y2 - y1; // we know y2 >= y1
            while (b < (dy+1)) {
                do Screen.drawHorizontal(x1, x2, y1+b);
                let b = b+1;
            }
            return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            var int halfWidth, dy;
            if (Screen.outOfBounds(x, y)) {
                do Sys.error(12); // illegal center coords
            }
            if ((r > 181) | (r < 0) | Screen.outOfBounds(x+r, y) | Screen.outOfBounds(x-r, y) | Screen.outOfBounds(x, y+r) | Screen.outOfBounds(x, y-r)) {
                do Sys.error(13); // illegal radius
            }
            if (r = 0) {
                do Screen.drawPixel(x, y);
                return;
            }
            let dy = -r;
            while (~(dy > r)) {
                let halfWidth = Math.sqrt((r*r)-(dy*dy));
                do Screen.drawHorizontal(x-halfWidth, x+halfWidth, y+dy);
                let dy = dy+1;
            }
            return;
        }
}
