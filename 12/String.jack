// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int maxLen;
    field int len;
    field Array ptr;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        var Array ptr;
        if (maxLength < 0) {
            do Sys.error(14); // length must be non-negetive
        }
        let ptr = Memory.alloc(maxLength);
        let maxLen = maxLength;
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do ptr.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j > len-1) | (j < 0)) {
            do Sys.error(15); // index out of bounds
        }
        return ptr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j > len-1) | (j < 0)) {
            do Sys.error(16); // index out of bounds
        }
        let ptr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len = maxLen) {
            do Sys.error(17); // string is full
        }
        let ptr[len] = c;
        let len = len+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len = 0) {
            do Sys.error(17); // string is empty
        }
        let len = len-1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var boolean neg;
        var int val, digit, i;
        var char curr;
        let val = 0;
        if (charAt(0) = 45) { // if the first char is 45 (i.e. '-') than the value is negative
            let neg = true;
            let i = 1; // if the number of negative the first digit is at index 1
        } else {
            let neg = false; 
            let i = 0; 
        }
        while ((i < len) & String.isDigit(charAt(i))) {
            let digit = String.char2int(charAt(i)); // convert from ascii representation of digit
            let val = (10*val)+digit;
            let i = i+1;
        }
        if (neg) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0; // empty the string
        if (val = 0) {
            do appendChar(48); // append '0'
            return;
        }
        if (val < 0) {
            do appendChar(45); // append '-' at the beginning of the string
            let val = -val;
        }
        do setIntAbs(val);
        return;
    }

    /** Sets this string to hold a representation of the given POSITIVE value. */
    method void setIntAbs(int val) {
        var int remaining;
        var char digit;
        let remaining = val/10;
        let digit = String.int2char(val - (10*remaining)); // ascii representation of val%10
        if (val < 10) {
            if (len = maxLen) {
                do Sys.error(19); // insufficient string capacity
            }
            do appendChar(digit);
        } else {
            do setIntAbs(remaining);
            if (len = maxLen) {
                do Sys.error(19); // insufficient string capacity
            }
            do appendChar(digit);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /** true if the given char is a digit */
    function boolean isDigit(char c) {
        return (c > 47) & (c < 58);
    }

    /** converts a char to its digit value */
    function int char2int(char c) {
        return c - 48;
    }

    /** converts an int value to its ascii representation */
    function char int2char(int val) {
        return val + 48;
    }
}