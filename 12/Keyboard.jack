// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
        static int address; 
        /** Initializes the keyboard. */
        function void init() {
            let address = 24576; // set the address of the the keyboard register
            return;
        } 

        /**
         * Returns the character of the currently pressed key on the keyboard;
         * if no key is currently pressed, returns 0.
         *
         * Recognizes all ASCII characters, as well as the following keys:
         * new line = 128 = String.newline()
         * backspace = 129 = String.backspace()
         * left arrow = 130
         * up arrow = 131
         * right arrow = 132
         * down arrow = 133
         * home = 134
         * End = 135
         * page up = 136
         * page down = 137
         * insert = 138
         * delete = 139
         * ESC = 140
         * F1 - F12 = 141 - 152
         */
        function char keyPressed() {
            return Memory.peek(address);
        }

        /**								
         * Waits until a key is pressed on the keyboard and released,
         * then echoes the key to the screen, and returns the character 
         * of the pressed key.
         */
        function char readChar() {
            // This should behave exactly like the built-in OS.
            // Pseudocode:
            // 1. display the cursor
            // 2. while (keyPressed() = 0): do nothing
            // 3. let c = code of the currently pressed key
            // 4. while (~(keyPressed() = 0)): do nothing
            // 5. display c at the current cursor location
            // 6. advance the cursor
            // 7. return c
            var char c;
            do Output.drawChar(0); // display the cursor
            while (Keyboard.keyPressed() = 0) {}
            let c = Keyboard.keyPressed();
            while (~(Keyboard.keyPressed() = 0)) {}
            do Output.printChar(c);
            return c;
        }

        /**								
         * Displays the message on the screen, reads from the keyboard the entered
         * text until a newline character is detected, echoes the text to the screen,
         * and returns its value. Also handles user backspaces if the current value
         * is longer than a single character.
         */
        function String readLine(String message) {
            // TODO DEBUG
            var String str;
            var char key;
            do Output.printString(message);
            let str = String.new(64);
            while (true) {
                let key = Keyboard.readChar();
                if (key = String.newLine()) {
                    do Output.println();
                    return str;
                }
                if ((key = String.backSpace()) & (str.length() > 0)) {
                    do str.eraseLastChar();
                } else { if (str.length() < 64) {
                    do str.appendChar(key);
                }}
            }
            return str;
        }     

        /**								
         * Displays the message on the screen, reads from the keyboard the entered
         * text until a newline character is detected, echoes the text to the screen,
         * and returns its integer value (until the first non-digit character in the
         * entered text is detected). Also handles user backspaces. 
         */
        function int readInt(String message) {
            var String intStr;
            let intStr = Keyboard.readLine(message);
            return intStr.intValue();
        }
}
