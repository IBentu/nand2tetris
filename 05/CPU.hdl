// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction[15] = i, instruction[13..14] = xx, instruction[12] = a,
    // instruction[6..11] = cccccc, instruction[3..5] = ddd, instruction[0..2] = jjj

    // Decode instruction type and "a" flag: 
    Or(a=instruction[15] , b=false , out=Cinstruction );
    Not(in=instruction[15] , out=Ainstruction ); // if it is an A instruction we should load the A register
    Mux16(a=regA , b=inM , sel=instruction[12] , out=AorM ); // instruction[12] = "a" flag, decides which input to use, RAM or A reg

    // if it is an A instruction, A should load the instruction input
    // otherwise feed the ALU output
    Mux16(a=ALUout , b=instruction , sel=Ainstruction , out=Ain ); 

    // dest (d) flags
    And(a=Cinstruction, b=instruction[3], out=writeM);  // CInstruction && dest==M => write to memory
    And(a=Cinstruction, b=instruction[4], out=loadD);  // CInstruction && dest==D => load regD
    And(a=Cinstruction, b=instruction[5], out=WriteA);  // CInstruction && dest==A => load regA
    Or(a=Ainstruction , b=WriteA , out=loadA ); // Ainstrution => load regA
    
    // Registers
    DRegister(in=ALUout , load=loadD , out=regD ); 
    ARegister(in=Ain , load=loadA , out=regA, out[0..14]=addressM );

	ALU(
        x=regD ,
        y=AorM , 
        zx= instruction[11], 
        nx= instruction[10], 
        zy= instruction[9], 
        ny= instruction[8], 
        f= instruction[7], 
        no= instruction[6], 
        out=ALUout ,
        out=outM ,
        zr=zeroFlag , 
        ng=negFlag 
    );


    // jump logic
    Or(a=zeroFlag , b=negFlag , out=zeroOrNegFlag );
    Not(in=zeroOrNegFlag , out= posFlag);
    And(a=posFlag, b=instruction[0], out=JGT);
    And(a=zeroFlag, b=instruction[1], out=JEQ);
    And(a=negFlag, b=instruction[2], out=JLT);

    Or(a=JGT , b=JEQ , out=JGE );
    Or(a=JLT , b=JGE , out=JMP );
    And(a=Cinstruction , b=JMP , out=loadPC );
    Not(in=loadPC , out=incPC );
    PC(in=regA , load=loadPC , inc=incPC , reset=reset , out[0..14]=pc );
}