// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // instruction (16b) = ixxaccccccdddjjj
    // instruction[15] = i, instruction[13..14] = xx, instruction[12] = a,
    // instruction[6..11] = cccccc, instruction[3..5] = ddd, instruction[0..2] = jjj

    // Decode instruction type and "a" flag: 
    And(a=instruction[15] , b=true , out=Cinstruction );
    Not(in=instruction[15] , out=Ainstruction ); // if it is an A instruction we should load the A register
    Mux16(a=regA , b=inM , sel=instruction[12] , out=AorM ); // instruction[12] = "a" flag, decides which input to use, RAM or A reg

    // if it is an A instruction, A should load the instruction input
    // otherwise feed the ALU output
    Mux16(a=ALUout , b=instruction , sel=Ainstruction , out=Ain ); 

    // dest (d) flags
    And(a=Cinstruction, b=instruction[3], out=writeM);  // CInstruction && dest==M => write to memory
    And(a=Cinstruction, b=instruction[4], out=loadD);  // CInstruction && dest==D => load regD
    And(a=Cinstruction, b=instruction[5], out=WriteA);  // CInstruction && dest==A => load regA
    Or(a=Ainstruction , b=WriteA , out=loadA ); // Ainstrution => load regA
    
    // Registers
    DRegister(in=ALUout , load=loadD , out=regD );  //register D
    ARegister(in=Ain , load=loadA , out=regA, out[0..14]=addressM ); //register A

	ExtendAlu(
        x=regD ,
        y=AorM , 
        instruction[0..5]=instruction[6..11],
        instruction[6..8]=instruction[12..14],
        out=ALUout ,
        out=outM ,
        zr=zeroFlag , 
        ng=negFlag 
    );


    // jump logic
    Or(a=zeroFlag , b=negFlag , out=zeroOrNegFlag );
    Not(in=zeroOrNegFlag , out= posFlag);
    And(a=posFlag, b=instruction[0], out=JGT);
    And(a=zeroFlag, b=instruction[1], out=JEQ);
    And(a=negFlag, b=instruction[2], out=JLT);

    Or(a=JGT , b=JEQ , out=JGE );
    Or(a=JLT , b=JGE , out=JMP );
    And(a=Cinstruction , b=JMP , out=loadPC );
    Not(in=loadPC , out=incPC );
    PC(in=regA , load=loadPC , inc=incPC , reset=reset , out[0..14]=pc );
}
