class Main {
    function void main() {
        // declarations
        var int enterKey, spaceKey, wKey, WKey, aKey, AKey, sKey, SKey, dKey, DKey, escKey;
        var Game game;
        var int i, j; // current selected cell
        var int key, lastKey;
        var int gameSpeed;
        var int rows, cols;
        var boolean UP, DOWN, LEFT, RIGHT, inbounds;

        // consts
        let enterKey = 128;
        let spaceKey = 32;
        let wKey = 119;
        let WKey = 87;
        let aKey = 97;
        let AKey = 65;
        let sKey = 115;
        let SKey = 83;
        let dKey = 100;
        let DKey = 68;
        let escKey = 140;
        
        do Main.drawControlsScreen();
        while (Main.neq(Keyboard.keyPressed(), enterKey)) {
            do Sys.wait(20); // show controls until enter is pressed
        }
        do Screen.clearScreen();
        do Game.setSize(16, 32);
        let rows = Game.getRows();
        let cols = Game.getCols();
        let game = Game.new();
        let i = 0;
        let j = 0;
        let key = Keyboard.keyPressed();
        while (Main.neq(key, enterKey)) {
            let inbounds = -1 < i-1;
            let UP = inbounds & (Main.eq(key, wKey) | Main.eq(key, WKey));

            let inbounds = -1 < j-1;
            let LEFT = inbounds & (Main.eq(key, aKey) | Main.eq(key, AKey));

            let inbounds = i+1 < rows;
            let DOWN = inbounds & (Main.eq(key, sKey) | Main.eq(key, SKey));

            let inbounds = j+1 < cols;
            let RIGHT = inbounds & (Main.eq(key, dKey) | Main.eq(key, DKey));

            if (UP) {
                let i = i - 1;
            } else { if (LEFT) {
                let j = j - 1;
            } else { if (DOWN) {
                let i = i + 1;
            } else { if (RIGHT) {
                let j = j + 1;
            } else { if (Main.eq(key, spaceKey)) { // change cell
                do game.flipCell(i, j);
                do game.updateCell(i, j);
            } else { if (Main.eq(key, escKey)) { // exit
                do Sys.halt();
            }}}}}}
            
            let lastKey = key;
            let key = Keyboard.keyPressed();
            if (Main.eq(key, lastKey)) {
                do Sys.wait(200000); // TODO: fix
            }
            let key = Keyboard.keyPressed();
            
            // TODO:
            //  maybe add cursor/border for current selected cell?
        }
        let gameSpeed = 5;
        while (Main.neq(Keyboard.keyPressed(), enterKey)| Main.neq(Keyboard.keyPressed(), escKey)) {
            do game.step();
            do game.draw();
            do Sys.wait(10000/gameSpeed);
        }
        do game.dispose();         
        do Sys.halt();
        return;
    }

    function boolean neq(int a, int b) {
        return (a > b) | (b > a);
    }


    function boolean eq(int a, int b) {
        return ~(a > b) & ~(b > a);
    }

    function void drawControlsScreen() {
        var int memAddress; 
        let memAddress = 16384;
        // column 0
        do Memory.poke(memAddress, 3602);
        do Memory.poke(memAddress +32, -24781);
        do Memory.poke(memAddress +64, -31949);
        do Memory.poke(memAddress +96, -28877);
        do Memory.poke(memAddress +128, -25037);
        do Memory.poke(memAddress +160, -26573);
        do Memory.poke(memAddress +192, -24769);
        do Memory.poke(memAddress +224, 3614);
        do Memory.poke(memAddress +704, 19384);
        do Memory.poke(memAddress +736, 23176);
        do Memory.poke(memAddress +768, 27272);
        do Memory.poke(memAddress +800, 27272);
        do Memory.poke(memAddress +832, 19384);
        // column 1
        do Memory.poke(memAddress +1, 775);
        do Memory.poke(memAddress +33, 879);
        do Memory.poke(memAddress +65, -15519);
        do Memory.poke(memAddress +97, -14585);
        do Memory.poke(memAddress +129, -6393);
        do Memory.poke(memAddress +161, -415);
        do Memory.poke(memAddress +193, 15471);
        do Memory.poke(memAddress +225, 6151);
        do Memory.poke(memAddress +289, -16384);
        do Memory.poke(memAddress +321, 8192);
        do Memory.poke(memAddress +353, 16384);
        do Memory.poke(memAddress +385, ~32767);
        do Memory.poke(memAddress +417, 24576);
        do Memory.poke(memAddress +705, 19031);
        do Memory.poke(memAddress +737, 19138);
        do Memory.poke(memAddress +769, 19282);
        do Memory.poke(memAddress +801, 19282);
        do Memory.poke(memAddress +833, 12882);
        // column 2
        do Memory.poke(memAddress +2, -8144);
        do Memory.poke(memAddress +34, -4048);
        do Memory.poke(memAddress +66, 6192);
        do Memory.poke(memAddress +98, 6200);
        do Memory.poke(memAddress +130, -967);
        do Memory.poke(memAddress +162, 7199);
        do Memory.poke(memAddress +194, 3599);
        do Memory.poke(memAddress +226, 1542);
        do Memory.poke(memAddress +290, -4538);
        do Memory.poke(memAddress +322, 8874);
        do Memory.poke(memAddress +354, 25318);
        do Memory.poke(memAddress +386, 8866);
        do Memory.poke(memAddress +418, -4446);
        do Memory.poke(memAddress +706, 11783);
        do Memory.poke(memAddress +738, 25121);
        do Memory.poke(memAddress +770, -23037);
        do Memory.poke(memAddress +802, -24031);
        do Memory.poke(memAddress +834, 11783);
        // column 3
        do Memory.poke(memAddress +3, 16128);
        do Memory.poke(memAddress +35, 1921);
        do Memory.poke(memAddress +67, 387);
        do Memory.poke(memAddress +99, 1923);
        do Memory.poke(memAddress +131, 7943);
        do Memory.poke(memAddress +163, 14343);
        do Memory.poke(memAddress +195, 15886);
        do Memory.poke(memAddress +227, 8076);
        do Memory.poke(memAddress +707, 7645);
        do Memory.poke(memAddress +739, 5193);
        do Memory.poke(memAddress +771, 3273);
        do Memory.poke(memAddress +803, 5193);
        do Memory.poke(memAddress +835, 5577);
        // column 4
        do Memory.poke(memAddress +4, 30);
        do Memory.poke(memAddress +36, 126);
        do Memory.poke(memAddress +68, 230);
        do Memory.poke(memAddress +100, 16582);
        do Memory.poke(memAddress +132, -7994);
        do Memory.poke(memAddress +164, 16614);
        do Memory.poke(memAddress +196, 126);
        do Memory.poke(memAddress +228, 30);
        return;
    }
}