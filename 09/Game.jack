class Game { // Conway's Game of Life
    field Array board;
    
    // screen is 512px X 256px so each cell will be 16px and the board will have 32cells X 16cells
    static int Rows;
    static int Cols;


    /** inits the Game state */
    constructor Game new() {
        let board = Game.initBoard();
        return this;
    }

    function Array initBoard() {
        var int i, j, rows, cols;
        var Array board, temp;
        let rows = Game.getRows();
        let cols = Game.getCols();
        let board = Array.new(rows);
        let i = 0;
        while (i < rows) {
            let board[i] = Array.new(cols);
            let temp = board[i];
            let j = 0;
            while (j < cols) {
                let temp[j] = false;
                let j = j+1;
            }
            let i = i + 1;
        }
        return board;
    }

    /** draws the current board state on the screen*/ 
    method void draw() {
        var int i, j, rows, cols;
        var Array temp;
        let rows = Game.getRows();
        let cols = Game.getCols();
        let i = 0;
        while (i < rows) {
            let j = 0;
            let temp = board[i];
            while (j < cols) {
                do Game.drawCell(i, j, temp[j]);
                do Sys.wait(50);
                let j = j+1;
            }
            let i = i+1;
        }
        return;
    }

    /** calculates the next step of the game and updates the board */
    method void step() {
        var int i, j, rows, cols;
        var Array next_board, temp;
        var int neighbors;
        let rows = Game.getRows();
        let cols = Game.getCols();
        let i = 0;
        let next_board = Array.new(rows);
        while (i < rows) {
            let temp = Array.new(cols);
            let j = 0;
            while (j < cols) {
                let neighbors = Game.neighbors(board, i, j);
                let temp[j] = (neighbors = 2) | (neighbors = 3); // selection for cells
                let j = j+1;
            }
            let next_board[i] = temp;
            let i = i+1;
        }
        do dispose();
        let board = next_board;
        return;
    }
    
    method void flipCell(int i, int j) {
        var Array temp;
        let temp = board[i];
        let temp[j] = ~temp[j];
        do Game.drawCell(i, j, temp[j]);
        return;
    }


    method void dispose() {
        var int i;
        var Array temp;
        let i = 0;
        while (i < Game.getRows()) {
            let temp = board[i];
            do temp.dispose();
            let i = i+1;
        }
        do board.dispose();
        return;
    }

    /** returns the number of alive neighbors of cell (i,j) */
    function int neighbors(Array board, int i, int j) {
        var int sum, di, dj;
        var Array temp;
        let sum = 0;
        let di = -1;
        while (di < 2) {
            let dj = -1;
            while (dj < 2) {
                if (~((di=0)&(dj=0))) {
                    if (Game.inbounds(i+di, j+dj)){
                        let temp = board[i+di];
                        if (temp[j+dj]) {let sum = sum+1;}
                    }
                }
                let dj = dj+1;
            }
            let di = di+1;
        }
        return sum;
    }

    /** returns true if (i,j) is in the bounds of the board */
    function boolean inbounds(int i, int j) {
        return ((-1 < i)&(-1 < j)&(i < Game.getRows())&(j < Game.getCols()));
    }

    /** draws cell i, j in the provided color */
    function void drawCell(int i, int j, boolean color) {
        var int real_i, real_j;
        let real_i = 16*i; // the coords on the screen pixel grid
        let real_j = 16*j;
        do Screen.setColor(color);
        do Screen.drawRectangle(real_j, real_i, real_j+15, real_i+15);
        return;
    }

    function void setSize(int rows, int cols) {
        let Rows = rows;
        let Cols = cols;
        return;
    }

    function int getRows() {
        return Rows;
    }
    
    function int getCols() {
        return Cols;
    }
}